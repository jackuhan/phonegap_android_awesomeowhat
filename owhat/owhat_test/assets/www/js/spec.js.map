{
  "version": 3,
  "file": "spec.js",
  "sources": [
    "spec/helpers/angular-mocks.js",
    "spec/helpers/helper.js",
    "spec/helpers/jasmine-fixture.js",
    "spec/helpers/jasmine-given.js",
    "spec/helpers/jasmine-only.js",
    "spec/helpers/jasmine-stealth.js",
    "spec/controllers/login_controller_spec.js",
    "spec/directives/shows_message_when_hovered_spec.js",
    "generated/js/spec.coffee.js"
  ],
  "names": [],
  "mappingspnEA;AACA;AACA;AACA;A;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC1etvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A",
  "sourcesContent": [
    "/**\n * @license AngularJS v1.2.9\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {\n\n'use strict';\n\n/**\n * @ngdoc overview\n * @name angular.mock\n * @description\n *\n * Namespace from 'angular-mocks.js' which contains testing related code.\n */\nangular.mock = {};\n\n/**\n * ! This is a private undocumented service !\n *\n * @name ngMock.$browser\n *\n * @description\n * This service is a mock implementation of {@link ng.$browser}. It provides fake\n * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,\n * cookies, etc...\n *\n * The api of this service is the same as that of the real {@link ng.$browser $browser}, except\n * that there are several helper methods available which can be used in tests.\n */\nangular.mock.$BrowserProvider = function() {\n  this.$get = function() {\n    return new angular.mock.$Browser();\n  };\n};\n\nangular.mock.$Browser = function() {\n  var self = this;\n\n  this.isMock = true;\n  self.$$url = \"http://server/\";\n  self.$$lastUrl = self.$$url; // used by url polling fn\n  self.pollFns = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = angular.noop;\n  self.$$incOutstandingRequestCount = angular.noop;\n\n\n  // register url polling fn\n\n  self.onUrlChange = function(listener) {\n    self.pollFns.push(\n      function() {\n        if (self.$$lastUrl != self.$$url) {\n          self.$$lastUrl = self.$$url;\n          listener(self.$$url);\n        }\n      }\n    );\n\n    return listener;\n  };\n\n  self.cookieHash = {};\n  self.lastCookieHash = {};\n  self.deferredFns = [];\n  self.deferredNextId = 0;\n\n  self.defer = function(fn, delay) {\n    delay = delay || 0;\n    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});\n    self.deferredFns.sort(function(a,b){ return a.time - b.time;});\n    return self.deferredNextId++;\n  };\n\n\n  /**\n   * @name ngMock.$browser#defer.now\n   * @propertyOf ngMock.$browser\n   *\n   * @description\n   * Current milliseconds mock time.\n   */\n  self.defer.now = 0;\n\n\n  self.defer.cancel = function(deferId) {\n    var fnIndex;\n\n    angular.forEach(self.deferredFns, function(fn, index) {\n      if (fn.id === deferId) fnIndex = index;\n    });\n\n    if (fnIndex !== undefined) {\n      self.deferredFns.splice(fnIndex, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n\n  /**\n   * @name ngMock.$browser#defer.flush\n   * @methodOf ngMock.$browser\n   *\n   * @description\n   * Flushes all pending requests and executes the defer callbacks.\n   *\n   * @param {number=} number of milliseconds to flush. See {@link #defer.now}\n   */\n  self.defer.flush = function(delay) {\n    if (angular.isDefined(delay)) {\n      self.defer.now += delay;\n    } else {\n      if (self.deferredFns.length) {\n        self.defer.now = self.deferredFns[self.deferredFns.length-1].time;\n      } else {\n        throw new Error('No deferred tasks to be flushed');\n      }\n    }\n\n    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {\n      self.deferredFns.shift().fn();\n    }\n  };\n\n  self.$$baseHref = '';\n  self.baseHref = function() {\n    return this.$$baseHref;\n  };\n};\nangular.mock.$Browser.prototype = {\n\n/**\n  * @name ngMock.$browser#poll\n  * @methodOf ngMock.$browser\n  *\n  * @description\n  * run all fns in pollFns\n  */\n  poll: function poll() {\n    angular.forEach(this.pollFns, function(pollFn){\n      pollFn();\n    });\n  },\n\n  addPollFn: function(pollFn) {\n    this.pollFns.push(pollFn);\n    return pollFn;\n  },\n\n  url: function(url, replace) {\n    if (url) {\n      this.$$url = url;\n      return this;\n    }\n\n    return this.$$url;\n  },\n\n  cookies:  function(name, value) {\n    if (name) {\n      if (angular.isUndefined(value)) {\n        delete this.cookieHash[name];\n      } else {\n        if (angular.isString(value) &&       //strings only\n            value.length <= 4096) {          //strict cookie storage limits\n          this.cookieHash[name] = value;\n        }\n      }\n    } else {\n      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {\n        this.lastCookieHash = angular.copy(this.cookieHash);\n        this.cookieHash = angular.copy(this.cookieHash);\n      }\n      return this.cookieHash;\n    }\n  },\n\n  notifyWhenNoOutstandingRequests: function(fn) {\n    fn();\n  }\n};\n\n\n/**\n * @ngdoc object\n * @name ngMock.$exceptionHandlerProvider\n *\n * @description\n * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\n * passed into the `$exceptionHandler`.\n */\n\n/**\n * @ngdoc object\n * @name ngMock.$exceptionHandler\n *\n * @description\n * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\n * into it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\n * information.\n *\n *\n * <pre>\n *   describe('$exceptionHandlerProvider', function() {\n *\n *     it('should capture log messages and exceptions', function() {\n *\n *       module(function($exceptionHandlerProvider) {\n *         $exceptionHandlerProvider.mode('log');\n *       });\n *\n *       inject(function($log, $exceptionHandler, $timeout) {\n *         $timeout(function() { $log.log(1); });\n *         $timeout(function() { $log.log(2); throw 'banana peel'; });\n *         $timeout(function() { $log.log(3); });\n *         expect($exceptionHandler.errors).toEqual([]);\n *         expect($log.assertEmpty());\n *         $timeout.flush();\n *         expect($exceptionHandler.errors).toEqual(['banana peel']);\n *         expect($log.log.logs).toEqual([[1], [2], [3]]);\n *       });\n *     });\n *   });\n * </pre>\n */\n\nangular.mock.$ExceptionHandlerProvider = function() {\n  var handler;\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$exceptionHandlerProvider#mode\n   * @methodOf ngMock.$exceptionHandlerProvider\n   *\n   * @description\n   * Sets the logging mode.\n   *\n   * @param {string} mode Mode of operation, defaults to `rethrow`.\n   *\n   *   - `rethrow`: If any errors are passed into the handler in tests, it typically\n   *                means that there is a bug in the application or test, so this mock will\n   *                make these tests fail.\n   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\n   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later\n   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\n   *            {@link ngMock.$log#reset reset()}\n   */\n  this.mode = function(mode) {\n    switch(mode) {\n      case 'rethrow':\n        handler = function(e) {\n          throw e;\n        };\n        break;\n      case 'log':\n        var errors = [];\n\n        handler = function(e) {\n          if (arguments.length == 1) {\n            errors.push(e);\n          } else {\n            errors.push([].slice.call(arguments, 0));\n          }\n        };\n\n        handler.errors = errors;\n        break;\n      default:\n        throw new Error(\"Unknown mode '\" + mode + \"', only 'log'/'rethrow' modes are allowed!\");\n    }\n  };\n\n  this.$get = function() {\n    return handler;\n  };\n\n  this.mode('rethrow');\n};\n\n\n/**\n * @ngdoc service\n * @name ngMock.$log\n *\n * @description\n * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\n * (one array per logging level). These arrays are exposed as `logs` property of each of the\n * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.\n *\n */\nangular.mock.$LogProvider = function() {\n  var debug = true;\n\n  function concat(array1, array2, index) {\n    return array1.concat(Array.prototype.slice.call(array2, index));\n  }\n\n  this.debugEnabled = function(flag) {\n    if (angular.isDefined(flag)) {\n      debug = flag;\n      return this;\n    } else {\n      return debug;\n    }\n  };\n\n  this.$get = function () {\n    var $log = {\n      log: function() { $log.log.logs.push(concat([], arguments, 0)); },\n      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },\n      info: function() { $log.info.logs.push(concat([], arguments, 0)); },\n      error: function() { $log.error.logs.push(concat([], arguments, 0)); },\n      debug: function() {\n        if (debug) {\n          $log.debug.logs.push(concat([], arguments, 0));\n        }\n      }\n    };\n\n    /**\n     * @ngdoc method\n     * @name ngMock.$log#reset\n     * @methodOf ngMock.$log\n     *\n     * @description\n     * Reset all of the logging arrays to empty.\n     */\n    $log.reset = function () {\n      /**\n       * @ngdoc property\n       * @name ngMock.$log#log.logs\n       * @propertyOf ngMock.$log\n       *\n       * @description\n       * Array of messages logged using {@link ngMock.$log#log}.\n       *\n       * @example\n       * <pre>\n       * $log.log('Some Log');\n       * var first = $log.log.logs.unshift();\n       * </pre>\n       */\n      $log.log.logs = [];\n      /**\n       * @ngdoc property\n       * @name ngMock.$log#info.logs\n       * @propertyOf ngMock.$log\n       *\n       * @description\n       * Array of messages logged using {@link ngMock.$log#info}.\n       *\n       * @example\n       * <pre>\n       * $log.info('Some Info');\n       * var first = $log.info.logs.unshift();\n       * </pre>\n       */\n      $log.info.logs = [];\n      /**\n       * @ngdoc property\n       * @name ngMock.$log#warn.logs\n       * @propertyOf ngMock.$log\n       *\n       * @description\n       * Array of messages logged using {@link ngMock.$log#warn}.\n       *\n       * @example\n       * <pre>\n       * $log.warn('Some Warning');\n       * var first = $log.warn.logs.unshift();\n       * </pre>\n       */\n      $log.warn.logs = [];\n      /**\n       * @ngdoc property\n       * @name ngMock.$log#error.logs\n       * @propertyOf ngMock.$log\n       *\n       * @description\n       * Array of messages logged using {@link ngMock.$log#error}.\n       *\n       * @example\n       * <pre>\n       * $log.log('Some Error');\n       * var first = $log.error.logs.unshift();\n       * </pre>\n       */\n      $log.error.logs = [];\n        /**\n       * @ngdoc property\n       * @name ngMock.$log#debug.logs\n       * @propertyOf ngMock.$log\n       *\n       * @description\n       * Array of messages logged using {@link ngMock.$log#debug}.\n       *\n       * @example\n       * <pre>\n       * $log.debug('Some Error');\n       * var first = $log.debug.logs.unshift();\n       * </pre>\n       */\n      $log.debug.logs = [];\n    };\n\n    /**\n     * @ngdoc method\n     * @name ngMock.$log#assertEmpty\n     * @methodOf ngMock.$log\n     *\n     * @description\n     * Assert that the all of the logging methods have no logged messages. If messages present, an\n     * exception is thrown.\n     */\n    $log.assertEmpty = function() {\n      var errors = [];\n      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {\n        angular.forEach($log[logLevel].logs, function(log) {\n          angular.forEach(log, function (logItem) {\n            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\\n' +\n                        (logItem.stack || ''));\n          });\n        });\n      });\n      if (errors.length) {\n        errors.unshift(\"Expected $log to be empty! Either a message was logged unexpectedly, or \"+\n          \"an expected log message was not checked and removed:\");\n        errors.push('');\n        throw new Error(errors.join('\\n---------\\n'));\n      }\n    };\n\n    $log.reset();\n    return $log;\n  };\n};\n\n\n/**\n * @ngdoc service\n * @name ngMock.$interval\n *\n * @description\n * Mock implementation of the $interval service.\n *\n * Use {@link ngMock.$interval#methods_flush `$interval.flush(millis)`} to\n * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\n * time.\n *\n * @param {function()} fn A function that should be called repeatedly.\n * @param {number} delay Number of milliseconds between each function call.\n * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\n *   indefinitely.\n * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n *   will invoke `fn` within the {@link ng.$rootScope.Scope#methods_$apply $apply} block.\n * @returns {promise} A promise which will be notified on each iteration.\n */\nangular.mock.$IntervalProvider = function() {\n  this.$get = ['$rootScope', '$q',\n       function($rootScope,   $q) {\n    var repeatFns = [],\n        nextRepeatId = 0,\n        now = 0;\n\n    var $interval = function(fn, delay, count, invokeApply) {\n      var deferred = $q.defer(),\n          promise = deferred.promise,\n          iteration = 0,\n          skipApply = (angular.isDefined(invokeApply) && !invokeApply);\n\n      count = (angular.isDefined(count)) ? count : 0,\n      promise.then(null, null, fn);\n\n      promise.$$intervalId = nextRepeatId;\n\n      function tick() {\n        deferred.notify(iteration++);\n\n        if (count > 0 && iteration >= count) {\n          var fnIndex;\n          deferred.resolve(iteration);\n\n          angular.forEach(repeatFns, function(fn, index) {\n            if (fn.id === promise.$$intervalId) fnIndex = index;\n          });\n\n          if (fnIndex !== undefined) {\n            repeatFns.splice(fnIndex, 1);\n          }\n        }\n\n        if (!skipApply) $rootScope.$apply();\n      }\n\n      repeatFns.push({\n        nextTime:(now + delay),\n        delay: delay,\n        fn: tick,\n        id: nextRepeatId,\n        deferred: deferred\n      });\n      repeatFns.sort(function(a,b){ return a.nextTime - b.nextTime;});\n\n      nextRepeatId++;\n      return promise;\n    };\n\n    $interval.cancel = function(promise) {\n      var fnIndex;\n\n      angular.forEach(repeatFns, function(fn, index) {\n        if (fn.id === promise.$$intervalId) fnIndex = index;\n      });\n\n      if (fnIndex !== undefined) {\n        repeatFns[fnIndex].deferred.reject('canceled');\n        repeatFns.splice(fnIndex, 1);\n        return true;\n      }\n\n      return false;\n    };\n\n    /**\n     * @ngdoc method\n     * @name ngMock.$interval#flush\n     * @methodOf ngMock.$interval\n     * @description\n     *\n     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.\n     *\n     * @param {number=} millis maximum timeout amount to flush up until.\n     *\n     * @return {number} The amount of time moved forward.\n     */\n    $interval.flush = function(millis) {\n      now += millis;\n      while (repeatFns.length && repeatFns[0].nextTime <= now) {\n        var task = repeatFns[0];\n        task.fn();\n        task.nextTime += task.delay;\n        repeatFns.sort(function(a,b){ return a.nextTime - b.nextTime;});\n      }\n      return millis;\n    };\n\n    return $interval;\n  }];\n};\n\n\n/* jshint -W101 */\n/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!\n * This directive should go inside the anonymous function but a bug in JSHint means that it would\n * not be enacted early enough to prevent the warning.\n */\nvar R_ISO8061_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?:\\:?(\\d\\d)(?:\\:?(\\d\\d)(?:\\.(\\d{3}))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d)))?$/;\n\nfunction jsonStringToDate(string) {\n  var match;\n  if (match = string.match(R_ISO8061_STR)) {\n    var date = new Date(0),\n        tzHour = 0,\n        tzMin  = 0;\n    if (match[9]) {\n      tzHour = int(match[9] + match[10]);\n      tzMin = int(match[9] + match[11]);\n    }\n    date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));\n    date.setUTCHours(int(match[4]||0) - tzHour,\n                     int(match[5]||0) - tzMin,\n                     int(match[6]||0),\n                     int(match[7]||0));\n    return date;\n  }\n  return string;\n}\n\nfunction int(str) {\n  return parseInt(str, 10);\n}\n\nfunction padNumber(num, digits, trim) {\n  var neg = '';\n  if (num < 0) {\n    neg =  '-';\n    num = -num;\n  }\n  num = '' + num;\n  while(num.length < digits) num = '0' + num;\n  if (trim)\n    num = num.substr(num.length - digits);\n  return neg + num;\n}\n\n\n/**\n * @ngdoc object\n * @name angular.mock.TzDate\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\n *\n * Mock of the Date type which has its timezone specified via constructor arg.\n *\n * The main purpose is to create Date-like instances with timezone fixed to the specified timezone\n * offset, so that we can test code that depends on local timezone settings without dependency on\n * the time zone settings of the machine where the code is running.\n *\n * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)\n * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*\n *\n * @example\n * !!!! WARNING !!!!!\n * This is not a complete Date object so only methods that were implemented can be called safely.\n * To make matters worse, TzDate instances inherit stuff from Date via a prototype.\n *\n * We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\n * incomplete we might be missing some non-standard methods. This can result in errors like:\n * \"Date.prototype.foo called on incompatible Object\".\n *\n * <pre>\n * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\n * newYearInBratislava.getTimezoneOffset() => -60;\n * newYearInBratislava.getFullYear() => 2010;\n * newYearInBratislava.getMonth() => 0;\n * newYearInBratislava.getDate() => 1;\n * newYearInBratislava.getHours() => 0;\n * newYearInBratislava.getMinutes() => 0;\n * newYearInBratislava.getSeconds() => 0;\n * </pre>\n *\n */\nangular.mock.TzDate = function (offset, timestamp) {\n  var self = new Date(0);\n  if (angular.isString(timestamp)) {\n    var tsStr = timestamp;\n\n    self.origDate = jsonStringToDate(timestamp);\n\n    timestamp = self.origDate.getTime();\n    if (isNaN(timestamp))\n      throw {\n        name: \"Illegal Argument\",\n        message: \"Arg '\" + tsStr + \"' passed into TzDate constructor is not a valid date string\"\n      };\n  } else {\n    self.origDate = new Date(timestamp);\n  }\n\n  var localOffset = new Date(timestamp).getTimezoneOffset();\n  self.offsetDiff = localOffset*60*1000 - offset*1000*60*60;\n  self.date = new Date(timestamp + self.offsetDiff);\n\n  self.getTime = function() {\n    return self.date.getTime() - self.offsetDiff;\n  };\n\n  self.toLocaleDateString = function() {\n    return self.date.toLocaleDateString();\n  };\n\n  self.getFullYear = function() {\n    return self.date.getFullYear();\n  };\n\n  self.getMonth = function() {\n    return self.date.getMonth();\n  };\n\n  self.getDate = function() {\n    return self.date.getDate();\n  };\n\n  self.getHours = function() {\n    return self.date.getHours();\n  };\n\n  self.getMinutes = function() {\n    return self.date.getMinutes();\n  };\n\n  self.getSeconds = function() {\n    return self.date.getSeconds();\n  };\n\n  self.getMilliseconds = function() {\n    return self.date.getMilliseconds();\n  };\n\n  self.getTimezoneOffset = function() {\n    return offset * 60;\n  };\n\n  self.getUTCFullYear = function() {\n    return self.origDate.getUTCFullYear();\n  };\n\n  self.getUTCMonth = function() {\n    return self.origDate.getUTCMonth();\n  };\n\n  self.getUTCDate = function() {\n    return self.origDate.getUTCDate();\n  };\n\n  self.getUTCHours = function() {\n    return self.origDate.getUTCHours();\n  };\n\n  self.getUTCMinutes = function() {\n    return self.origDate.getUTCMinutes();\n  };\n\n  self.getUTCSeconds = function() {\n    return self.origDate.getUTCSeconds();\n  };\n\n  self.getUTCMilliseconds = function() {\n    return self.origDate.getUTCMilliseconds();\n  };\n\n  self.getDay = function() {\n    return self.date.getDay();\n  };\n\n  // provide this method only on browsers that already have it\n  if (self.toISOString) {\n    self.toISOString = function() {\n      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +\n            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +\n            padNumber(self.origDate.getUTCDate(), 2) + 'T' +\n            padNumber(self.origDate.getUTCHours(), 2) + ':' +\n            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +\n            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +\n            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';\n    };\n  }\n\n  //hide all methods not implemented in this mock that the Date prototype exposes\n  var unimplementedMethods = ['getUTCDay',\n      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\n      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',\n      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',\n      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',\n      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];\n\n  angular.forEach(unimplementedMethods, function(methodName) {\n    self[methodName] = function() {\n      throw new Error(\"Method '\" + methodName + \"' is not implemented in the TzDate mock\");\n    };\n  });\n\n  return self;\n};\n\n//make \"tzDateInstance instanceof Date\" return true\nangular.mock.TzDate.prototype = Date.prototype;\n/* jshint +W101 */\n\n// TODO(matias): remove this IMMEDIATELY once we can properly detect the\n// presence of a registered module\nvar animateLoaded;\ntry {\n  angular.module('ngAnimate');\n  animateLoaded = true;\n} catch(e) {}\n\nif(animateLoaded) {\n  angular.module('ngAnimate').config(['$provide', function($provide) {\n    var reflowQueue = [];\n    $provide.value('$$animateReflow', function(fn) {\n      reflowQueue.push(fn);\n      return angular.noop;\n    });\n    $provide.decorator('$animate', function($delegate) {\n      $delegate.triggerReflow = function() {\n        if(reflowQueue.length === 0) {\n          throw new Error('No animation reflows present');\n        }\n        angular.forEach(reflowQueue, function(fn) {\n          fn();\n        });\n        reflowQueue = [];\n      };\n      return $delegate;\n    });\n  }]);\n}\n\nangular.mock.animate = angular.module('mock.animate', ['ng'])\n\n  .config(['$provide', function($provide) {\n\n    $provide.decorator('$animate', function($delegate) {\n      var animate = {\n        queue : [],\n        enabled : $delegate.enabled,\n        flushNext : function(name) {\n          var tick = animate.queue.shift();\n\n          if (!tick) throw new Error('No animation to be flushed');\n          if(tick.method !== name) {\n            throw new Error('The next animation is not \"' + name +\n              '\", but is \"' + tick.method + '\"');\n          }\n          tick.fn();\n          return tick;\n        }\n      };\n\n      angular.forEach(['enter','leave','move','addClass','removeClass'], function(method) {\n        animate[method] = function() {\n          var params = arguments;\n          animate.queue.push({\n            method : method,\n            params : params,\n            element : angular.isElement(params[0]) && params[0],\n            parent  : angular.isElement(params[1]) && params[1],\n            after   : angular.isElement(params[2]) && params[2],\n            fn : function() {\n              $delegate[method].apply($delegate, params);\n            }\n          });\n        };\n      });\n\n      return animate;\n    });\n\n  }]);\n\n\n/**\n * @ngdoc function\n * @name angular.mock.dump\n * @description\n *\n * *NOTE*: this is not an injectable instance, just a globally available function.\n *\n * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for\n * debugging.\n *\n * This method is also available on window, where it can be used to display objects on debug\n * console.\n *\n * @param {*} object - any object to turn into string.\n * @return {string} a serialized string of the argument\n */\nangular.mock.dump = function(object) {\n  return serialize(object);\n\n  function serialize(object) {\n    var out;\n\n    if (angular.isElement(object)) {\n      object = angular.element(object);\n      out = angular.element('<div></div>');\n      angular.forEach(object, function(element) {\n        out.append(angular.element(element).clone());\n      });\n      out = out.html();\n    } else if (angular.isArray(object)) {\n      out = [];\n      angular.forEach(object, function(o) {\n        out.push(serialize(o));\n      });\n      out = '[ ' + out.join(', ') + ' ]';\n    } else if (angular.isObject(object)) {\n      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {\n        out = serializeScope(object);\n      } else if (object instanceof Error) {\n        out = object.stack || ('' + object.name + ': ' + object.message);\n      } else {\n        // TODO(i): this prevents methods being logged,\n        // we should have a better way to serialize objects\n        out = angular.toJson(object, true);\n      }\n    } else {\n      out = String(object);\n    }\n\n    return out;\n  }\n\n  function serializeScope(scope, offset) {\n    offset = offset ||  '  ';\n    var log = [offset + 'Scope(' + scope.$id + '): {'];\n    for ( var key in scope ) {\n      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\\$|this)/)) {\n        log.push('  ' + key + ': ' + angular.toJson(scope[key]));\n      }\n    }\n    var child = scope.$$childHead;\n    while(child) {\n      log.push(serializeScope(child, offset + '  '));\n      child = child.$$nextSibling;\n    }\n    log.push('}');\n    return log.join('\\n' + offset);\n  }\n};\n\n/**\n * @ngdoc object\n * @name ngMock.$httpBackend\n * @description\n * Fake HTTP backend implementation suitable for unit testing applications that use the\n * {@link ng.$http $http service}.\n *\n * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\n * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\n *\n * During unit testing, we want our unit tests to run quickly and have no external dependencies so\n * we don’t want to send {@link https://developer.mozilla.org/en/xmlhttprequest XHR} or\n * {@link http://en.wikipedia.org/wiki/JSONP JSONP} requests to a real server. All we really need is\n * to verify whether a certain request has been sent or not, or alternatively just let the\n * application make requests, respond with pre-trained responses and assert that the end result is\n * what we expect it to be.\n *\n * This mock implementation can be used to respond with static or dynamic responses via the\n * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\n *\n * When an Angular application needs some data from a server, it calls the $http service, which\n * sends the request to a real server using $httpBackend service. With dependency injection, it is\n * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\n * the requests and respond with some testing data without sending a request to real server.\n *\n * There are two ways to specify what test data should be returned as http responses by the mock\n * backend when the code under test makes http requests:\n *\n * - `$httpBackend.expect` - specifies a request expectation\n * - `$httpBackend.when` - specifies a backend definition\n *\n *\n * # Request Expectations vs Backend Definitions\n *\n * Request expectations provide a way to make assertions about requests made by the application and\n * to define responses for those requests. The test will fail if the expected requests are not made\n * or they are made in the wrong order.\n *\n * Backend definitions allow you to define a fake backend for your application which doesn't assert\n * if a particular request was made or not, it just returns a trained response if a request is made.\n * The test will pass whether or not the request gets made during testing.\n *\n *\n * <table class=\"table\">\n *   <tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\n *   <tr>\n *     <th>Syntax</th>\n *     <td>.expect(...).respond(...)</td>\n *     <td>.when(...).respond(...)</td>\n *   </tr>\n *   <tr>\n *     <th>Typical usage</th>\n *     <td>strict unit tests</td>\n *     <td>loose (black-box) unit testing</td>\n *   </tr>\n *   <tr>\n *     <th>Fulfills multiple requests</th>\n *     <td>NO</td>\n *     <td>YES</td>\n *   </tr>\n *   <tr>\n *     <th>Order of requests matters</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Request required</th>\n *     <td>YES</td>\n *     <td>NO</td>\n *   </tr>\n *   <tr>\n *     <th>Response required</th>\n *     <td>optional (see below)</td>\n *     <td>YES</td>\n *   </tr>\n * </table>\n *\n * In cases where both backend definitions and request expectations are specified during unit\n * testing, the request expectations are evaluated first.\n *\n * If a request expectation has no response specified, the algorithm will search your backend\n * definitions for an appropriate response.\n *\n * If a request didn't match any expectation or if the expectation doesn't have the response\n * defined, the backend definitions are evaluated in sequential order to see if any of them match\n * the request. The response from the first matched definition is returned.\n *\n *\n * # Flushing HTTP requests\n *\n * The $httpBackend used in production, always responds to requests with responses asynchronously.\n * If we preserved this behavior in unit testing, we'd have to create async unit tests, which are\n * hard to write, follow and maintain. At the same time the testing mock, can't respond\n * synchronously because that would change the execution of the code under test. For this reason the\n * mock $httpBackend has a `flush()` method, which allows the test to explicitly flush pending\n * requests and thus preserving the async api of the backend, while allowing the test to execute\n * synchronously.\n *\n *\n * # Unit testing with mock $httpBackend\n * The following code shows how to setup and use the mock backend in unit testing a controller.\n * First we create the controller under test\n *\n  <pre>\n  // The controller code\n  function MyController($scope, $http) {\n    var authToken;\n\n    $http.get('/auth.py').success(function(data, status, headers) {\n      authToken = headers('A-Token');\n      $scope.user = data;\n    });\n\n    $scope.saveMessage = function(message) {\n      var headers = { 'Authorization': authToken };\n      $scope.status = 'Saving...';\n\n      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {\n        $scope.status = '';\n      }).error(function() {\n        $scope.status = 'ERROR!';\n      });\n    };\n  }\n  </pre>\n *\n * Now we setup the mock backend and create the test specs.\n *\n  <pre>\n    // testing controller\n    describe('MyController', function() {\n       var $httpBackend, $rootScope, createController;\n\n       beforeEach(inject(function($injector) {\n         // Set up the mock http service responses\n         $httpBackend = $injector.get('$httpBackend');\n         // backend definition common for all tests\n         $httpBackend.when('GET', '/auth.py').respond({userId: 'userX'}, {'A-Token': 'xxx'});\n\n         // Get hold of a scope (i.e. the root scope)\n         $rootScope = $injector.get('$rootScope');\n         // The $controller service is used to create instances of controllers\n         var $controller = $injector.get('$controller');\n\n         createController = function() {\n           return $controller('MyController', {'$scope' : $rootScope });\n         };\n       }));\n\n\n       afterEach(function() {\n         $httpBackend.verifyNoOutstandingExpectation();\n         $httpBackend.verifyNoOutstandingRequest();\n       });\n\n\n       it('should fetch authentication token', function() {\n         $httpBackend.expectGET('/auth.py');\n         var controller = createController();\n         $httpBackend.flush();\n       });\n\n\n       it('should send msg to server', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         // now you don’t care about the authentication, but\n         // the controller will still send the request and\n         // $httpBackend will respond without you having to\n         // specify the expectation and response for this request\n\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\n         $rootScope.saveMessage('message content');\n         expect($rootScope.status).toBe('Saving...');\n         $httpBackend.flush();\n         expect($rootScope.status).toBe('');\n       });\n\n\n       it('should send auth header', function() {\n         var controller = createController();\n         $httpBackend.flush();\n\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\n           // check if the header was send, if it wasn't the expectation won't\n           // match the request and the test will fail\n           return headers['Authorization'] == 'xxx';\n         }).respond(201, '');\n\n         $rootScope.saveMessage('whatever');\n         $httpBackend.flush();\n       });\n    });\n   </pre>\n */\nangular.mock.$HttpBackendProvider = function() {\n  this.$get = ['$rootScope', createHttpBackendMock];\n};\n\n/**\n * General factory function for $httpBackend mock.\n * Returns instance for unit testing (when no arguments specified):\n *   - passing through is disabled\n *   - auto flushing is disabled\n *\n * Returns instance for e2e testing (when `$delegate` and `$browser` specified):\n *   - passing through (delegating request to real backend) is enabled\n *   - auto flushing is enabled\n *\n * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)\n * @param {Object=} $browser Auto-flushing enabled if specified\n * @return {Object} Instance of $httpBackend mock\n */\nfunction createHttpBackendMock($rootScope, $delegate, $browser) {\n  var definitions = [],\n      expectations = [],\n      responses = [],\n      responsesPush = angular.bind(responses, responses.push),\n      copy = angular.copy;\n\n  function createResponse(status, data, headers) {\n    if (angular.isFunction(status)) return status;\n\n    return function() {\n      return angular.isNumber(status)\n          ? [status, data, headers]\n          : [200, status, data];\n    };\n  }\n\n  // TODO(vojta): change params to: method, url, data, headers, callback\n  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {\n    var xhr = new MockXhr(),\n        expectation = expectations[0],\n        wasExpected = false;\n\n    function prettyPrint(data) {\n      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)\n          ? data\n          : angular.toJson(data);\n    }\n\n    function wrapResponse(wrapped) {\n      if (!$browser && timeout && timeout.then) timeout.then(handleTimeout);\n\n      return handleResponse;\n\n      function handleResponse() {\n        var response = wrapped.response(method, url, data, headers);\n        xhr.$$respHeaders = response[2];\n        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders());\n      }\n\n      function handleTimeout() {\n        for (var i = 0, ii = responses.length; i < ii; i++) {\n          if (responses[i] === handleResponse) {\n            responses.splice(i, 1);\n            callback(-1, undefined, '');\n            break;\n          }\n        }\n      }\n    }\n\n    if (expectation && expectation.match(method, url)) {\n      if (!expectation.matchData(data))\n        throw new Error('Expected ' + expectation + ' with different data\\n' +\n            'EXPECTED: ' + prettyPrint(expectation.data) + '\\nGOT:      ' + data);\n\n      if (!expectation.matchHeaders(headers))\n        throw new Error('Expected ' + expectation + ' with different headers\\n' +\n                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\\nGOT:      ' +\n                        prettyPrint(headers));\n\n      expectations.shift();\n\n      if (expectation.response) {\n        responses.push(wrapResponse(expectation));\n        return;\n      }\n      wasExpected = true;\n    }\n\n    var i = -1, definition;\n    while ((definition = definitions[++i])) {\n      if (definition.match(method, url, data, headers || {})) {\n        if (definition.response) {\n          // if $browser specified, we do auto flush all requests\n          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));\n        } else if (definition.passThrough) {\n          $delegate(method, url, data, callback, headers, timeout, withCredentials);\n        } else throw new Error('No response defined !');\n        return;\n      }\n    }\n    throw wasExpected ?\n        new Error('No response defined !') :\n        new Error('Unexpected request: ' + method + ' ' + url + '\\n' +\n                  (expectation ? 'Expected ' + expectation : 'No more request expected'));\n  }\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#when\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current definition.\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\n   *   request is handled.\n   *\n   *  - respond –\n   *      `{function([status,] data[, headers])|function(function(method, url, data, headers)}`\n   *    – The respond method takes a set of static data to be returned or a function that can return\n   *    an array containing response status (number), response data (string) and response headers\n   *    (Object).\n   */\n  $httpBackend.when = function(method, url, data, headers) {\n    var definition = new MockHttpExpectation(method, url, data, headers),\n        chain = {\n          respond: function(status, data, headers) {\n            definition.response = createResponse(status, data, headers);\n          }\n        };\n\n    if ($browser) {\n      chain.passThrough = function() {\n        definition.passThrough = true;\n      };\n    }\n\n    definitions.push(definition);\n    return chain;\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenGET\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for GET requests. For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenHEAD\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for HEAD requests. For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenDELETE\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for DELETE requests. For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenPOST\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for POST requests. For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenPUT\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for PUT requests.  For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\n   *   data string and returns true if the data is as expected.\n   * @param {(Object|function(Object))=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#whenJSONP\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new backend definition for JSONP requests. For more info see `when()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled.\n   */\n  createShortMethods('when');\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expect\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation.\n   *\n   * @param {string} method HTTP method.\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n   *   object and returns true if the headers match the current expectation.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *  request is handled.\n   *\n   *  - respond –\n   *    `{function([status,] data[, headers])|function(function(method, url, data, headers)}`\n   *    – The respond method takes a set of static data to be returned or a function that can return\n   *    an array containing response status (number), response data (string) and response headers\n   *    (Object).\n   */\n  $httpBackend.expect = function(method, url, data, headers) {\n    var expectation = new MockHttpExpectation(method, url, data, headers);\n    expectations.push(expectation);\n    return {\n      respond: function(status, data, headers) {\n        expectation.response = createResponse(status, data, headers);\n      }\n    };\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectGET\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for GET requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   * request is handled. See #expect for more info.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectHEAD\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for HEAD requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectDELETE\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for DELETE requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectPOST\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for POST requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectPUT\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for PUT requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectPATCH\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for PATCH requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\n   *  receives data string and returns true if the data is as expected, or Object if request body\n   *  is in JSON format.\n   * @param {Object=} headers HTTP headers.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#expectJSONP\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Creates a new request expectation for JSONP requests. For more info see `expect()`.\n   *\n   * @param {string|RegExp} url HTTP url.\n   * @returns {requestHandler} Returns an object with `respond` method that control how a matched\n   *   request is handled.\n   */\n  createShortMethods('expect');\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#flush\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Flushes all pending requests using the trained responses.\n   *\n   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,\n   *   all pending requests will be flushed. If there are no pending requests when the flush method\n   *   is called an exception is thrown (as this typically a sign of programming error).\n   */\n  $httpBackend.flush = function(count) {\n    $rootScope.$digest();\n    if (!responses.length) throw new Error('No pending request to flush !');\n\n    if (angular.isDefined(count)) {\n      while (count--) {\n        if (!responses.length) throw new Error('No more pending request to flush !');\n        responses.shift()();\n      }\n    } else {\n      while (responses.length) {\n        responses.shift()();\n      }\n    }\n    $httpBackend.verifyNoOutstandingExpectation();\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#verifyNoOutstandingExpectation\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Verifies that all of the requests defined via the `expect` api were made. If any of the\n   * requests were not made, verifyNoOutstandingExpectation throws an exception.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * <pre>\n   *   afterEach($httpBackend.verifyNoOutstandingExpectation);\n   * </pre>\n   */\n  $httpBackend.verifyNoOutstandingExpectation = function() {\n    $rootScope.$digest();\n    if (expectations.length) {\n      throw new Error('Unsatisfied requests: ' + expectations.join(', '));\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#verifyNoOutstandingRequest\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Verifies that there are no outstanding requests that need to be flushed.\n   *\n   * Typically, you would call this method following each test case that asserts requests using an\n   * \"afterEach\" clause.\n   *\n   * <pre>\n   *   afterEach($httpBackend.verifyNoOutstandingRequest);\n   * </pre>\n   */\n  $httpBackend.verifyNoOutstandingRequest = function() {\n    if (responses.length) {\n      throw new Error('Unflushed requests: ' + responses.length);\n    }\n  };\n\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$httpBackend#resetExpectations\n   * @methodOf ngMock.$httpBackend\n   * @description\n   * Resets all request expectations, but preserves all backend definitions. Typically, you would\n   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of\n   * $httpBackend mock.\n   */\n  $httpBackend.resetExpectations = function() {\n    expectations.length = 0;\n    responses.length = 0;\n  };\n\n  return $httpBackend;\n\n\n  function createShortMethods(prefix) {\n    angular.forEach(['GET', 'DELETE', 'JSONP'], function(method) {\n     $httpBackend[prefix + method] = function(url, headers) {\n       return $httpBackend[prefix](method, url, undefined, headers);\n     };\n    });\n\n    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {\n      $httpBackend[prefix + method] = function(url, data, headers) {\n        return $httpBackend[prefix](method, url, data, headers);\n      };\n    });\n  }\n}\n\nfunction MockHttpExpectation(method, url, data, headers) {\n\n  this.data = data;\n  this.headers = headers;\n\n  this.match = function(m, u, d, h) {\n    if (method != m) return false;\n    if (!this.matchUrl(u)) return false;\n    if (angular.isDefined(d) && !this.matchData(d)) return false;\n    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;\n    return true;\n  };\n\n  this.matchUrl = function(u) {\n    if (!url) return true;\n    if (angular.isFunction(url.test)) return url.test(u);\n    return url == u;\n  };\n\n  this.matchHeaders = function(h) {\n    if (angular.isUndefined(headers)) return true;\n    if (angular.isFunction(headers)) return headers(h);\n    return angular.equals(headers, h);\n  };\n\n  this.matchData = function(d) {\n    if (angular.isUndefined(data)) return true;\n    if (data && angular.isFunction(data.test)) return data.test(d);\n    if (data && angular.isFunction(data)) return data(d);\n    if (data && !angular.isString(data)) return angular.equals(data, angular.fromJson(d));\n    return data == d;\n  };\n\n  this.toString = function() {\n    return method + ' ' + url;\n  };\n}\n\nfunction createMockXhr() {\n  return new MockXhr();\n}\n\nfunction MockXhr() {\n\n  // hack for testing $http, $httpBackend\n  MockXhr.$$lastInstance = this;\n\n  this.open = function(method, url, async) {\n    this.$$method = method;\n    this.$$url = url;\n    this.$$async = async;\n    this.$$reqHeaders = {};\n    this.$$respHeaders = {};\n  };\n\n  this.send = function(data) {\n    this.$$data = data;\n  };\n\n  this.setRequestHeader = function(key, value) {\n    this.$$reqHeaders[key] = value;\n  };\n\n  this.getResponseHeader = function(name) {\n    // the lookup must be case insensitive,\n    // that's why we try two quick lookups first and full scan last\n    var header = this.$$respHeaders[name];\n    if (header) return header;\n\n    name = angular.lowercase(name);\n    header = this.$$respHeaders[name];\n    if (header) return header;\n\n    header = undefined;\n    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {\n      if (!header && angular.lowercase(headerName) == name) header = headerVal;\n    });\n    return header;\n  };\n\n  this.getAllResponseHeaders = function() {\n    var lines = [];\n\n    angular.forEach(this.$$respHeaders, function(value, key) {\n      lines.push(key + ': ' + value);\n    });\n    return lines.join('\\n');\n  };\n\n  this.abort = angular.noop;\n}\n\n\n/**\n * @ngdoc function\n * @name ngMock.$timeout\n * @description\n *\n * This service is just a simple decorator for {@link ng.$timeout $timeout} service\n * that adds a \"flush\" and \"verifyNoPendingTasks\" methods.\n */\n\nangular.mock.$TimeoutDecorator = function($delegate, $browser) {\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$timeout#flush\n   * @methodOf ngMock.$timeout\n   * @description\n   *\n   * Flushes the queue of pending tasks.\n   *\n   * @param {number=} delay maximum timeout amount to flush up until\n   */\n  $delegate.flush = function(delay) {\n    $browser.defer.flush(delay);\n  };\n\n  /**\n   * @ngdoc method\n   * @name ngMock.$timeout#verifyNoPendingTasks\n   * @methodOf ngMock.$timeout\n   * @description\n   *\n   * Verifies that there are no pending tasks that need to be flushed.\n   */\n  $delegate.verifyNoPendingTasks = function() {\n    if ($browser.deferredFns.length) {\n      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +\n          formatPendingTasksAsString($browser.deferredFns));\n    }\n  };\n\n  function formatPendingTasksAsString(tasks) {\n    var result = [];\n    angular.forEach(tasks, function(task) {\n      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');\n    });\n\n    return result.join(', ');\n  }\n\n  return $delegate;\n};\n\n/**\n *\n */\nangular.mock.$RootElementProvider = function() {\n  this.$get = function() {\n    return angular.element('<div ng-app></div>');\n  };\n};\n\n/**\n * @ngdoc overview\n * @name ngMock\n * @description\n *\n * # ngMock\n *\n * The `ngMock` module providers support to inject and mock Angular services into unit tests.\n * In addition, ngMock also extends various core ng services such that they can be\n * inspected and controlled in a synchronous manner within test code.\n *\n * {@installModule mocks}\n *\n * <div doc-module-components=\"ngMock\"></div>\n *\n */\nangular.module('ngMock', ['ng']).provider({\n  $browser: angular.mock.$BrowserProvider,\n  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,\n  $log: angular.mock.$LogProvider,\n  $interval: angular.mock.$IntervalProvider,\n  $httpBackend: angular.mock.$HttpBackendProvider,\n  $rootElement: angular.mock.$RootElementProvider\n}).config(['$provide', function($provide) {\n  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);\n}]);\n\n/**\n * @ngdoc overview\n * @name ngMockE2E\n * @description\n *\n * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\n * Currently there is only one mock present in this module -\n * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.\n */\nangular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {\n  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);\n}]);\n\n/**\n * @ngdoc object\n * @name ngMockE2E.$httpBackend\n * @description\n * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\n * applications that use the {@link ng.$http $http service}.\n *\n * *Note*: For fake http backend implementation suitable for unit testing please see\n * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.\n *\n * This implementation can be used to respond with static or dynamic responses via the `when` api\n * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\n * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\n * templates from a webserver).\n *\n * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\n * is being developed with the real backend api replaced with a mock, it is often desirable for\n * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch\n * templates or static files from the webserver). To configure the backend with this behavior\n * use the `passThrough` request handler of `when` instead of `respond`.\n *\n * Additionally, we don't want to manually have to flush mocked out requests like we do during unit\n * testing. For this reason the e2e $httpBackend automatically flushes mocked out requests\n * automatically, closely simulating the behavior of the XMLHttpRequest object.\n *\n * To setup the application to run with this http backend, you have to create a module that depends\n * on the `ngMockE2E` and your application modules and defines the fake backend:\n *\n * <pre>\n *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\n *   myAppDev.run(function($httpBackend) {\n *     phones = [{name: 'phone1'}, {name: 'phone2'}];\n *\n *     // returns the current list of phones\n *     $httpBackend.whenGET('/phones').respond(phones);\n *\n *     // adds a new phone to the phones array\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\n *       phones.push(angular.fromJson(data));\n *     });\n *     $httpBackend.whenGET(/^\\/templates\\//).passThrough();\n *     //...\n *   });\n * </pre>\n *\n * Afterwards, bootstrap your app with this new module.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#when\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition.\n *\n * @param {string} method HTTP method.\n * @param {string|RegExp} url HTTP url.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n *   object and returns true if the headers match the current definition.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n *\n *  - respond –\n *    `{function([status,] data[, headers])|function(function(method, url, data, headers)}`\n *    – The respond method takes a set of static data to be returned or a function that can return\n *    an array containing response status (number), response data (string) and response headers\n *    (Object).\n *  - passThrough – `{function()}` – Any request matching a backend definition with `passThrough`\n *    handler, will be pass through to the real backend (an XHR request will be made to the\n *    server.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenGET\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for GET requests. For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenHEAD\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for HEAD requests. For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenDELETE\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for DELETE requests. For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenPOST\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for POST requests. For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenPUT\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for PUT requests.  For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenPATCH\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for PATCH requests.  For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @param {(string|RegExp)=} data HTTP request body.\n * @param {(Object|function(Object))=} headers HTTP headers.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\n\n/**\n * @ngdoc method\n * @name ngMockE2E.$httpBackend#whenJSONP\n * @methodOf ngMockE2E.$httpBackend\n * @description\n * Creates a new backend definition for JSONP requests. For more info see `when()`.\n *\n * @param {string|RegExp} url HTTP url.\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\n *   control how a matched request is handled.\n */\nangular.mock.e2e = {};\nangular.mock.e2e.$httpBackendDecorator =\n  ['$rootScope', '$delegate', '$browser', createHttpBackendMock];\n\n\nangular.mock.clearDataCache = function() {\n  var key,\n      cache = angular.element.cache;\n\n  for(key in cache) {\n    if (Object.prototype.hasOwnProperty.call(cache,key)) {\n      var handle = cache[key].handle;\n\n      handle && angular.element(handle.elem).off();\n      delete cache[key];\n    }\n  }\n};\n\n\nif(window.jasmine || window.mocha) {\n\n  var currentSpec = null,\n      isSpecRunning = function() {\n        return currentSpec && (window.mocha || currentSpec.queue.running);\n      };\n\n\n  beforeEach(function() {\n    currentSpec = this;\n  });\n\n  afterEach(function() {\n    var injector = currentSpec.$injector;\n\n    currentSpec.$injector = null;\n    currentSpec.$modules = null;\n    currentSpec = null;\n\n    if (injector) {\n      injector.get('$rootElement').off();\n      injector.get('$browser').pollFns.length = 0;\n    }\n\n    angular.mock.clearDataCache();\n\n    // clean up jquery's fragment cache\n    angular.forEach(angular.element.fragments, function(val, key) {\n      delete angular.element.fragments[key];\n    });\n\n    MockXhr.$$lastInstance = null;\n\n    angular.forEach(angular.callbacks, function(val, key) {\n      delete angular.callbacks[key];\n    });\n    angular.callbacks.counter = 0;\n  });\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.module\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   *\n   * This function registers a module configuration code. It collects the configuration information\n   * which will be used when the injector is created by {@link angular.mock.inject inject}.\n   *\n   * See {@link angular.mock.inject inject} for usage example\n   *\n   * @param {...(string|Function|Object)} fns any number of modules which are represented as string\n   *        aliases or as anonymous module initialization functions. The modules are used to\n   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\n   *        object literal is passed they will be register as values in the module, the key being\n   *        the module name and the value being what is returned.\n   */\n  window.module = angular.mock.module = function() {\n    var moduleFns = Array.prototype.slice.call(arguments, 0);\n    return isSpecRunning() ? workFn() : workFn;\n    /////////////////////\n    function workFn() {\n      if (currentSpec.$injector) {\n        throw new Error('Injector already created, can not register a module!');\n      } else {\n        var modules = currentSpec.$modules || (currentSpec.$modules = []);\n        angular.forEach(moduleFns, function(module) {\n          if (angular.isObject(module) && !angular.isArray(module)) {\n            modules.push(function($provide) {\n              angular.forEach(module, function(value, key) {\n                $provide.value(key, value);\n              });\n            });\n          } else {\n            modules.push(module);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * @ngdoc function\n   * @name angular.mock.inject\n   * @description\n   *\n   * *NOTE*: This function is also published on window for easy access.<br>\n   *\n   * The inject function wraps a function into an injectable function. The inject() creates new\n   * instance of {@link AUTO.$injector $injector} per test, which is then used for\n   * resolving references.\n   *\n   *\n   * ## Resolving References (Underscore Wrapping)\n   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\n   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\n   * that is declared in the scope of the `describe()` block. Since we would, most likely, want\n   * the variable to have the same name of the reference we have a problem, since the parameter\n   * to the `inject()` function would hide the outer variable.\n   *\n   * To help with this, the injected parameters can, optionally, be enclosed with underscores.\n   * These are ignored by the injector when the reference name is resolved.\n   *\n   * For example, the parameter `_myService_` would be resolved as the reference `myService`.\n   * Since it is available in the function body as _myService_, we can then assign it to a variable\n   * defined in an outer scope.\n   *\n   * ```\n   * // Defined out reference variable outside\n   * var myService;\n   *\n   * // Wrap the parameter in underscores\n   * beforeEach( inject( function(_myService_){\n   *   myService = _myService_;\n   * }));\n   *\n   * // Use myService in a series of tests.\n   * it('makes use of myService', function() {\n   *   myService.doStuff();\n   * });\n   *\n   * ```\n   *\n   * See also {@link angular.mock.module angular.mock.module}\n   *\n   * ## Example\n   * Example of what a typical jasmine tests looks like with the inject method.\n   * <pre>\n   *\n   *   angular.module('myApplicationModule', [])\n   *       .value('mode', 'app')\n   *       .value('version', 'v1.0.1');\n   *\n   *\n   *   describe('MyApp', function() {\n   *\n   *     // You need to load modules that you want to test,\n   *     // it loads only the \"ng\" module by default.\n   *     beforeEach(module('myApplicationModule'));\n   *\n   *\n   *     // inject() is used to inject arguments of all given functions\n   *     it('should provide a version', inject(function(mode, version) {\n   *       expect(version).toEqual('v1.0.1');\n   *       expect(mode).toEqual('app');\n   *     }));\n   *\n   *\n   *     // The inject and module method can also be used inside of the it or beforeEach\n   *     it('should override a version and test the new version is injected', function() {\n   *       // module() takes functions or strings (module aliases)\n   *       module(function($provide) {\n   *         $provide.value('version', 'overridden'); // override version here\n   *       });\n   *\n   *       inject(function(version) {\n   *         expect(version).toEqual('overridden');\n   *       });\n   *     });\n   *   });\n   *\n   * </pre>\n   *\n   * @param {...Function} fns any number of functions which will be injected using the injector.\n   */\n\n\n\n  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {\n    this.message = e.message;\n    this.name = e.name;\n    if (e.line) this.line = e.line;\n    if (e.sourceId) this.sourceId = e.sourceId;\n    if (e.stack && errorForStack)\n      this.stack = e.stack + '\\n' + errorForStack.stack;\n    if (e.stackArray) this.stackArray = e.stackArray;\n  };\n  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;\n\n  window.inject = angular.mock.inject = function() {\n    var blockFns = Array.prototype.slice.call(arguments, 0);\n    var errorForStack = new Error('Declaration Location');\n    return isSpecRunning() ? workFn() : workFn;\n    /////////////////////\n    function workFn() {\n      var modules = currentSpec.$modules || [];\n\n      modules.unshift('ngMock');\n      modules.unshift('ng');\n      var injector = currentSpec.$injector;\n      if (!injector) {\n        injector = currentSpec.$injector = angular.injector(modules);\n      }\n      for(var i = 0, ii = blockFns.length; i < ii; i++) {\n        try {\n          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */\n          injector.invoke(blockFns[i] || angular.noop, this);\n          /* jshint +W040 */\n        } catch (e) {\n          if (e.stack && errorForStack) {\n            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\n          }\n          throw e;\n        } finally {\n          errorForStack = null;\n        }\n      }\n    }\n  };\n}\n\n\n})(window, window.angular);\n",
    "var root = this;\n\nroot.context = root.describe;\nroot.xcontext = root.xdescribe;\n",
    "\n/*\njasmine-fixture 1.0.5\nMakes injecting HTML snippets into the DOM easy & clean!\nsite: https://github.com/searls/jasmine-fixture\n*/\n\n\n(function() {\n  var createHTMLBlock;\n\n  (function($) {\n    var jasmineFixture, originalAffix, originalInject, originalJasmineFixture, root, _;\n    root = this;\n    originalJasmineFixture = root.jasmineFixture;\n    originalInject = root.inject;\n    originalAffix = root.affix;\n    _ = function(list) {\n      return {\n        inject: function(iterator, memo) {\n          var item, _i, _len, _results;\n          _results = [];\n          for (_i = 0, _len = list.length; _i < _len; _i++) {\n            item = list[_i];\n            _results.push(memo = iterator(memo, item));\n          }\n          return _results;\n        }\n      };\n    };\n    root.jasmineFixture = function($) {\n      var $whatsTheRootOf, applyAttributes, defaultConfiguration, defaults, init, injectContents, isReady, isString, itLooksLikeHtml, rootId, tidyUp;\n      $.fn.affix = root.affix = function(selectorOptions) {\n        var $top;\n        $top = null;\n        _(selectorOptions.split(/[ ](?=[^\\]]*?(?:\\[|$))/)).inject(function($parent, elementSelector) {\n          var $el;\n          if (elementSelector === \">\") {\n            return $parent;\n          }\n          $el = createHTMLBlock($, elementSelector).appendTo($parent);\n          $top || ($top = $el);\n          return $el;\n        }, $whatsTheRootOf(this));\n        return $top;\n      };\n      $whatsTheRootOf = function(that) {\n        if (that.jquery != null) {\n          return that;\n        } else if ($('#jasmine_content').length > 0) {\n          return $('#jasmine_content');\n        } else {\n          return $('<div id=\"jasmine_content\"></div>').appendTo('body');\n        }\n      };\n      afterEach(function() {\n        return $('#jasmine_content').remove();\n      });\n      isReady = false;\n      rootId = \"specContainer\";\n      defaultConfiguration = {\n        el: \"div\",\n        cssClass: \"\",\n        id: \"\",\n        text: \"\",\n        html: \"\",\n        defaultAttribute: \"class\",\n        attrs: {}\n      };\n      defaults = $.extend({}, defaultConfiguration);\n      $.jasmine = {\n        inject: function(arg, context) {\n          var $toInject, config, parent;\n          if (isReady !== true) {\n            init();\n          }\n          parent = (context ? context : $(\"#\" + rootId));\n          $toInject = void 0;\n          if (itLooksLikeHtml(arg)) {\n            $toInject = $(arg);\n          } else {\n            config = $.extend({}, defaults, arg, {\n              userString: arg\n            });\n            $toInject = $(\"<\" + config.el + \"></\" + config.el + \">\");\n            applyAttributes($toInject, config);\n            injectContents($toInject, config);\n          }\n          return $toInject.appendTo(parent);\n        },\n        configure: function(config) {\n          return $.extend(defaults, config);\n        },\n        restoreDefaults: function() {\n          return defaults = $.extend({}, defaultConfiguration);\n        },\n        noConflict: function() {\n          root.jasmineFixture = originalJasmineFixture;\n          root.inject = originalInject;\n          root.affix = originalAffix;\n          return this;\n        }\n      };\n      $.fn.inject = function(html) {\n        return $.jasmine.inject(html, $(this));\n      };\n      applyAttributes = function($html, config) {\n        var attrs, key, _results;\n        attrs = $.extend({}, {\n          id: config.id,\n          \"class\": config[\"class\"] || config.cssClass\n        }, config.attrs);\n        if (isString(config.userString)) {\n          attrs[config.defaultAttribute] = config.userString;\n        }\n        _results = [];\n        for (key in attrs) {\n          if (attrs[key]) {\n            _results.push($html.attr(key, attrs[key]));\n          } else {\n            _results.push(void 0);\n          }\n        }\n        return _results;\n      };\n      injectContents = function($el, config) {\n        if (config.text && config.html) {\n          throw \"Error: because they conflict, you may only configure inject() to set `html` or `text`, not both! \\n\\nHTML was: \" + config.html + \" \\n\\n Text was: \" + config.text;\n        } else if (config.text) {\n          return $el.text(config.text);\n        } else {\n          if (config.html) {\n            return $el.html(config.html);\n          }\n        }\n      };\n      itLooksLikeHtml = function(arg) {\n        return isString(arg) && arg.indexOf(\"<\") !== -1;\n      };\n      isString = function(arg) {\n        return arg && arg.constructor === String;\n      };\n      init = function() {\n        $(\"body\").append(\"<div id=\\\"\" + rootId + \"\\\"></div>\");\n        return isReady = true;\n      };\n      tidyUp = function() {\n        $(\"#\" + rootId).remove();\n        return isReady = false;\n      };\n      $(function($) {\n        return init();\n      });\n      afterEach(function() {\n        return tidyUp();\n      });\n      return $.jasmine;\n    };\n    if ($) {\n      jasmineFixture = root.jasmineFixture($);\n      return root.inject = root.inject || jasmineFixture.inject;\n    }\n  })(window.jQuery);\n\n  createHTMLBlock = (function() {\n    var bindData, bindEvents, parseAttributes, parseClasses, parseContents, parseEnclosure, parseReferences, parseVariableScope, regAttr, regAttrDfn, regAttrs, regCBrace, regClass, regClasses, regData, regDatas, regEvent, regEvents, regExclamation, regId, regReference, regTag, regTagNotContent, regZenTagDfn;\n    createHTMLBlock = function($, ZenObject, data, functions, indexes) {\n      var ZenCode, arr, block, blockAttrs, blockClasses, blockHTML, blockId, blockTag, blocks, el, el2, els, forScope, indexName, inner, len, obj, origZenCode, paren, result, ret, zc, zo;\n      if ($.isPlainObject(ZenObject)) {\n        ZenCode = ZenObject.main;\n      } else {\n        ZenCode = ZenObject;\n        ZenObject = {\n          main: ZenCode\n        };\n      }\n      origZenCode = ZenCode;\n      if (indexes === undefined) {\n        indexes = {};\n      }\n      if (ZenCode.charAt(0) === \"!\" || $.isArray(data)) {\n        if ($.isArray(data)) {\n          forScope = ZenCode;\n        } else {\n          obj = parseEnclosure(ZenCode, \"!\");\n          obj = obj.substring(obj.indexOf(\":\") + 1, obj.length - 1);\n          forScope = parseVariableScope(ZenCode);\n        }\n        while (forScope.charAt(0) === \"@\") {\n          forScope = parseVariableScope(\"!for:!\" + parseReferences(forScope, ZenObject));\n        }\n        zo = ZenObject;\n        zo.main = forScope;\n        el = $();\n        if (ZenCode.substring(0, 5) === \"!for:\" || $.isArray(data)) {\n          if (!$.isArray(data) && obj.indexOf(\":\") > 0) {\n            indexName = obj.substring(0, obj.indexOf(\":\"));\n            obj = obj.substr(obj.indexOf(\":\") + 1);\n          }\n          arr = ($.isArray(data) ? data : data[obj]);\n          zc = zo.main;\n          if ($.isArray(arr) || $.isPlainObject(arr)) {\n            $.map(arr, function(value, index) {\n              var next;\n              zo.main = zc;\n              if (indexName !== undefined) {\n                indexes[indexName] = index;\n              }\n              if (!$.isPlainObject(value)) {\n                value = {\n                  value: value\n                };\n              }\n              next = createHTMLBlock($, zo, value, functions, indexes);\n              if (el.length !== 0) {\n                return $.each(next, function(index, value) {\n                  return el.push(value);\n                });\n              }\n            });\n          }\n          if (!$.isArray(data)) {\n            ZenCode = ZenCode.substr(obj.length + 6 + forScope.length);\n          } else {\n            ZenCode = \"\";\n          }\n        } else if (ZenCode.substring(0, 4) === \"!if:\") {\n          result = parseContents(\"!\" + obj + \"!\", data, indexes);\n          if (result !== \"undefined\" || result !== \"false\" || result !== \"\") {\n            el = createHTMLBlock($, zo, data, functions, indexes);\n          }\n          ZenCode = ZenCode.substr(obj.length + 5 + forScope.length);\n        }\n        ZenObject.main = ZenCode;\n      } else if (ZenCode.charAt(0) === \"(\") {\n        paren = parseEnclosure(ZenCode, \"(\", \")\");\n        inner = paren.substring(1, paren.length - 1);\n        ZenCode = ZenCode.substr(paren.length);\n        zo = ZenObject;\n        zo.main = inner;\n        el = createHTMLBlock($, zo, data, functions, indexes);\n      } else {\n        blocks = ZenCode.match(regZenTagDfn);\n        block = blocks[0];\n        if (block.length === 0) {\n          return \"\";\n        }\n        if (block.indexOf(\"@\") >= 0) {\n          ZenCode = parseReferences(ZenCode, ZenObject);\n          zo = ZenObject;\n          zo.main = ZenCode;\n          return createHTMLBlock($, zo, data, functions, indexes);\n        }\n        block = parseContents(block, data, indexes);\n        blockClasses = parseClasses($, block);\n        if (regId.test(block)) {\n          blockId = regId.exec(block)[1];\n        }\n        blockAttrs = parseAttributes(block, data);\n        blockTag = (block.charAt(0) === \"{\" ? \"span\" : \"div\");\n        if (ZenCode.charAt(0) !== \"#\" && ZenCode.charAt(0) !== \".\" && ZenCode.charAt(0) !== \"{\") {\n          blockTag = regTag.exec(block)[1];\n        }\n        if (block.search(regCBrace) !== -1) {\n          blockHTML = block.match(regCBrace)[1];\n        }\n        blockAttrs = $.extend(blockAttrs, {\n          id: blockId,\n          \"class\": blockClasses,\n          html: blockHTML\n        });\n        el = $(\"<\" + blockTag + \">\", blockAttrs);\n        el.attr(blockAttrs);\n        el = bindEvents(block, el, functions);\n        el = bindData(block, el, data);\n        ZenCode = ZenCode.substr(blocks[0].length);\n        ZenObject.main = ZenCode;\n      }\n      if (ZenCode.length > 0) {\n        if (ZenCode.charAt(0) === \">\") {\n          if (ZenCode.charAt(1) === \"(\") {\n            zc = parseEnclosure(ZenCode.substr(1), \"(\", \")\");\n            ZenCode = ZenCode.substr(zc.length + 1);\n          } else if (ZenCode.charAt(1) === \"!\") {\n            obj = parseEnclosure(ZenCode.substr(1), \"!\");\n            forScope = parseVariableScope(ZenCode.substr(1));\n            zc = obj + forScope;\n            ZenCode = ZenCode.substr(zc.length + 1);\n          } else {\n            len = Math.max(ZenCode.indexOf(\"+\"), ZenCode.length);\n            zc = ZenCode.substring(1, len);\n            ZenCode = ZenCode.substr(len);\n          }\n          zo = ZenObject;\n          zo.main = zc;\n          els = $(createHTMLBlock($, zo, data, functions, indexes));\n          els.appendTo(el);\n        }\n        if (ZenCode.charAt(0) === \"+\") {\n          zo = ZenObject;\n          zo.main = ZenCode.substr(1);\n          el2 = createHTMLBlock($, zo, data, functions, indexes);\n          $.each(el2, function(index, value) {\n            return el.push(value);\n          });\n        }\n      }\n      ret = el;\n      return ret;\n    };\n    bindData = function(ZenCode, el, data) {\n      var datas, i, split;\n      if (ZenCode.search(regDatas) === 0) {\n        return el;\n      }\n      datas = ZenCode.match(regDatas);\n      if (datas === null) {\n        return el;\n      }\n      i = 0;\n      while (i < datas.length) {\n        split = regData.exec(datas[i]);\n        if (split[3] === undefined) {\n          $(el).data(split[1], data[split[1]]);\n        } else {\n          $(el).data(split[1], data[split[3]]);\n        }\n        i++;\n      }\n      return el;\n    };\n    bindEvents = function(ZenCode, el, functions) {\n      var bindings, fn, i, split;\n      if (ZenCode.search(regEvents) === 0) {\n        return el;\n      }\n      bindings = ZenCode.match(regEvents);\n      if (bindings === null) {\n        return el;\n      }\n      i = 0;\n      while (i < bindings.length) {\n        split = regEvent.exec(bindings[i]);\n        if (split[2] === undefined) {\n          fn = functions[split[1]];\n        } else {\n          fn = functions[split[2]];\n        }\n        $(el).bind(split[1], fn);\n        i++;\n      }\n      return el;\n    };\n    parseAttributes = function(ZenBlock, data) {\n      var attrStrs, attrs, i, parts;\n      if (ZenBlock.search(regAttrDfn) === -1) {\n        return undefined;\n      }\n      attrStrs = ZenBlock.match(regAttrDfn);\n      attrs = {};\n      i = 0;\n      while (i < attrStrs.length) {\n        parts = regAttr.exec(attrStrs[i]);\n        attrs[parts[1]] = \"\";\n        if (parts[3] !== undefined) {\n          attrs[parts[1]] = parseContents(parts[3], data);\n        }\n        i++;\n      }\n      return attrs;\n    };\n    parseClasses = function($, ZenBlock) {\n      var classes, clsString, i;\n      ZenBlock = ZenBlock.match(regTagNotContent)[0];\n      if (ZenBlock.search(regClasses) === -1) {\n        return undefined;\n      }\n      classes = ZenBlock.match(regClasses);\n      clsString = \"\";\n      i = 0;\n      while (i < classes.length) {\n        clsString += \" \" + regClass.exec(classes[i])[1];\n        i++;\n      }\n      return $.trim(clsString);\n    };\n    parseContents = function(ZenBlock, data, indexes) {\n      var html;\n      if (indexes === undefined) {\n        indexes = {};\n      }\n      html = ZenBlock;\n      if (data === undefined) {\n        return html;\n      }\n      while (regExclamation.test(html)) {\n        html = html.replace(regExclamation, function(str, str2) {\n          var begChar, fn, val;\n          begChar = \"\";\n          if (str.indexOf(\"!for:\") > 0 || str.indexOf(\"!if:\") > 0) {\n            return str;\n          }\n          if (str.charAt(0) !== \"!\") {\n            begChar = str.charAt(0);\n            str = str.substring(2, str.length - 1);\n          }\n          fn = new Function(\"data\", \"indexes\", \"var r=undefined;\" + \"with(data){try{r=\" + str + \";}catch(e){}}\" + \"with(indexes){try{if(r===undefined)r=\" + str + \";}catch(e){}}\" + \"return r;\");\n          val = unescape(fn(data, indexes));\n          return begChar + val;\n        });\n      }\n      html = html.replace(/\\\\./g, function(str) {\n        return str.charAt(1);\n      });\n      return unescape(html);\n    };\n    parseEnclosure = function(ZenCode, open, close, count) {\n      var index, ret;\n      if (close === undefined) {\n        close = open;\n      }\n      index = 1;\n      if (count === undefined) {\n        count = (ZenCode.charAt(0) === open ? 1 : 0);\n      }\n      if (count === 0) {\n        return;\n      }\n      while (count > 0 && index < ZenCode.length) {\n        if (ZenCode.charAt(index) === close && ZenCode.charAt(index - 1) !== \"\\\\\") {\n          count--;\n        } else {\n          if (ZenCode.charAt(index) === open && ZenCode.charAt(index - 1) !== \"\\\\\") {\n            count++;\n          }\n        }\n        index++;\n      }\n      ret = ZenCode.substring(0, index);\n      return ret;\n    };\n    parseReferences = function(ZenCode, ZenObject) {\n      ZenCode = ZenCode.replace(regReference, function(str) {\n        var fn;\n        str = str.substr(1);\n        fn = new Function(\"objs\", \"var r=\\\"\\\";\" + \"with(objs){try{\" + \"r=\" + str + \";\" + \"}catch(e){}}\" + \"return r;\");\n        return fn(ZenObject, parseReferences);\n      });\n      return ZenCode;\n    };\n    parseVariableScope = function(ZenCode) {\n      var forCode, rest, tag;\n      if (ZenCode.substring(0, 5) !== \"!for:\" && ZenCode.substring(0, 4) !== \"!if:\") {\n        return undefined;\n      }\n      forCode = parseEnclosure(ZenCode, \"!\");\n      ZenCode = ZenCode.substr(forCode.length);\n      if (ZenCode.charAt(0) === \"(\") {\n        return parseEnclosure(ZenCode, \"(\", \")\");\n      }\n      tag = ZenCode.match(regZenTagDfn)[0];\n      ZenCode = ZenCode.substr(tag.length);\n      if (ZenCode.length === 0 || ZenCode.charAt(0) === \"+\") {\n        return tag;\n      } else if (ZenCode.charAt(0) === \">\") {\n        rest = \"\";\n        rest = parseEnclosure(ZenCode.substr(1), \"(\", \")\", 1);\n        return tag + \">\" + rest;\n      }\n      return undefined;\n    };\n    regZenTagDfn = /([#\\.\\@]?[\\w-]+|\\[([\\w-!?=:\"']+(=\"([^\"]|\\\\\")+\")? {0,})+\\]|\\~[\\w$]+=[\\w$]+|&[\\w$]+(=[\\w$]+)?|[#\\.\\@]?!([^!]|\\\\!)+!){0,}(\\{([^\\}]|\\\\\\})+\\})?/i;\n    regTag = /(\\w+)/i;\n    regId = /#([\\w-!]+)/i;\n    regTagNotContent = /((([#\\.]?[\\w-]+)?(\\[([\\w!]+(=\"([^\"]|\\\\\")+\")? {0,})+\\])?)+)/i;\n    regClasses = /(\\.[\\w-]+)/g;\n    regClass = /\\.([\\w-]+)/i;\n    regReference = /(@[\\w$_][\\w$_\\d]+)/i;\n    regAttrDfn = /(\\[([\\w-!]+(=\"?([^\"]|\\\\\")+\"?)? {0,})+\\])/ig;\n    regAttrs = /([\\w-!]+(=\"([^\"]|\\\\\")+\")?)/g;\n    regAttr = /([\\w-!]+)(=\"?(([^\"\\]]|\\\\\")+)\"?)?/i;\n    regCBrace = /\\{(([^\\}]|\\\\\\})+)\\}/i;\n    regExclamation = /(?:([^\\\\]|^))!([^!]|\\\\!)+!/g;\n    regEvents = /\\~[\\w$]+(=[\\w$]+)?/g;\n    regEvent = /\\~([\\w$]+)=([\\w$]+)/i;\n    regDatas = /&[\\w$]+(=[\\w$]+)?/g;\n    regData = /&([\\w$]+)(=([\\w$]+))?/i;\n    return createHTMLBlock;\n  })();\n\n}).call(this);\n",
    "/* jasmine-given - 2.4.0\n * Adds a Given-When-Then DSL to jasmine as an alternative style for specs\n * https://github.com/searls/jasmine-given\n */\n(function() {\n  (function(jasmine) {\n    var additionalInsightsForErrorMessage, apparentReferenceError, attemptedEquality, comparisonInsight, declareJasmineSpec, deepEqualsNotice, doneWrapperFor, evalInContextOfSpec, finalStatementFrom, getBlock, invariantList, mostRecentExpectations, mostRecentlyUsed, o, root, stringifyExpectation, wasComparison, whenList;\n    mostRecentlyUsed = null;\n    beforeEach(function() {\n      return this.addMatchers(jasmine._given.matchers);\n    });\n    root = this;\n    root.Given = function() {\n      mostRecentlyUsed = root.Given;\n      return beforeEach(getBlock(arguments));\n    };\n    whenList = [];\n    root.When = function() {\n      var b;\n      mostRecentlyUsed = root.When;\n      b = getBlock(arguments);\n      beforeEach(function() {\n        return whenList.push(b);\n      });\n      return afterEach(function() {\n        return whenList.pop();\n      });\n    };\n    invariantList = [];\n    root.Invariant = function(invariantBehavior) {\n      mostRecentlyUsed = root.Invariant;\n      beforeEach(function() {\n        return invariantList.push(invariantBehavior);\n      });\n      return afterEach(function() {\n        return invariantList.pop();\n      });\n    };\n    getBlock = function(thing) {\n      var assignResultTo, setupFunction;\n      setupFunction = o(thing).firstThat(function(arg) {\n        return o(arg).isFunction();\n      });\n      assignResultTo = o(thing).firstThat(function(arg) {\n        return o(arg).isString();\n      });\n      return doneWrapperFor(setupFunction, function(done) {\n        var context, result;\n        context = jasmine.getEnv().currentSpec;\n        result = setupFunction.call(context, done);\n        if (assignResultTo) {\n          if (!context[assignResultTo]) {\n            return context[assignResultTo] = result;\n          } else {\n            throw new Error(\"Unfortunately, the variable '\" + assignResultTo + \"' is already assigned to: \" + context[assignResultTo]);\n          }\n        }\n      });\n    };\n    mostRecentExpectations = null;\n    declareJasmineSpec = function(specArgs, itFunction) {\n      var expectationFunction, expectations, label;\n      if (itFunction == null) {\n        itFunction = it;\n      }\n      label = o(specArgs).firstThat(function(arg) {\n        return o(arg).isString();\n      });\n      expectationFunction = o(specArgs).firstThat(function(arg) {\n        return o(arg).isFunction();\n      });\n      mostRecentlyUsed = root.subsequentThen;\n      mostRecentExpectations = expectations = [expectationFunction];\n      itFunction(\"then \" + (label != null ? label : stringifyExpectation(expectations)), doneWrapperFor(expectationFunction, function(done) {\n        var block, expectation, i, _i, _j, _len, _len1, _ref, _ref1, _results;\n        _ref = whenList != null ? whenList : [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          block = _ref[_i];\n          block();\n        }\n        _ref1 = invariantList.concat(expectations);\n        _results = [];\n        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n          expectation = _ref1[i];\n          _results.push(expect(expectation).not.toHaveReturnedFalseFromThen(jasmine.getEnv().currentSpec, i + 1, done));\n        }\n        return _results;\n      }));\n      return {\n        Then: subsequentThen,\n        And: subsequentThen\n      };\n    };\n    doneWrapperFor = function(func, toWrap) {\n      if (func.length === 0) {\n        return function() {\n          return toWrap();\n        };\n      } else {\n        return function(done) {\n          return toWrap(done);\n        };\n      }\n    };\n    root.Then = function() {\n      return declareJasmineSpec(arguments);\n    };\n    root.Then.only = function() {\n      return declareJasmineSpec(arguments, it.only);\n    };\n    root.subsequentThen = function(additionalExpectation) {\n      mostRecentExpectations.push(additionalExpectation);\n      return this;\n    };\n    mostRecentlyUsed = root.Given;\n    root.And = function() {\n      return mostRecentlyUsed.apply(this, jasmine.util.argsToArray(arguments));\n    };\n    o = function(thing) {\n      return {\n        isFunction: function() {\n          return Object.prototype.toString.call(thing) === \"[object Function]\";\n        },\n        isString: function() {\n          return Object.prototype.toString.call(thing) === \"[object String]\";\n        },\n        firstThat: function(test) {\n          var i;\n          i = 0;\n          while (i < thing.length) {\n            if (test(thing[i]) === true) {\n              return thing[i];\n            }\n            i++;\n          }\n          return void 0;\n        }\n      };\n    };\n    jasmine._given = {\n      matchers: {\n        toHaveReturnedFalseFromThen: function(context, n, done) {\n          var e, exception, result;\n          result = false;\n          exception = void 0;\n          try {\n            result = this.actual.call(context, done);\n          } catch (_error) {\n            e = _error;\n            exception = e;\n          }\n          this.message = function() {\n            var msg, stringyExpectation;\n            stringyExpectation = stringifyExpectation(this.actual);\n            msg = \"Then clause\" + (n > 1 ? \" #\" + n : \"\") + \" `\" + stringyExpectation + \"` failed by \";\n            if (exception) {\n              msg += \"throwing: \" + exception.toString();\n            } else {\n              msg += \"returning false\";\n            }\n            msg += additionalInsightsForErrorMessage(stringyExpectation);\n            return msg;\n          };\n          return result === false;\n        }\n      }\n    };\n    stringifyExpectation = function(expectation) {\n      var matches;\n      matches = expectation.toString().replace(/\\n/g, '').match(/function\\s?\\(.*\\)\\s?{\\s*(return\\s+)?(.*?)(;)?\\s*}/i);\n      if (matches && matches.length >= 3) {\n        return matches[2].replace(/\\s+/g, ' ');\n      } else {\n        return \"\";\n      }\n    };\n    additionalInsightsForErrorMessage = function(expectationString) {\n      var comparison, expectation;\n      expectation = finalStatementFrom(expectationString);\n      if (comparison = wasComparison(expectation)) {\n        return comparisonInsight(expectation, comparison);\n      } else {\n        return \"\";\n      }\n    };\n    finalStatementFrom = function(expectationString) {\n      var multiStatement;\n      if (multiStatement = expectationString.match(/.*return (.*)/)) {\n        return multiStatement[multiStatement.length - 1];\n      } else {\n        return expectationString;\n      }\n    };\n    wasComparison = function(expectation) {\n      var comparator, comparison, left, right, s;\n      if (comparison = expectation.match(/(.*) (===|!==|==|!=|>|>=|<|<=) (.*)/)) {\n        s = comparison[0], left = comparison[1], comparator = comparison[2], right = comparison[3];\n        return {\n          left: left,\n          comparator: comparator,\n          right: right\n        };\n      }\n    };\n    comparisonInsight = function(expectation, comparison) {\n      var left, msg, right;\n      left = evalInContextOfSpec(comparison.left);\n      right = evalInContextOfSpec(comparison.right);\n      if (apparentReferenceError(left) && apparentReferenceError(right)) {\n        return \"\";\n      }\n      msg = \"\\n\\nThis comparison was detected:\\n  \" + expectation + \"\\n  \" + left + \" \" + comparison.comparator + \" \" + right;\n      if (attemptedEquality(left, right, comparison.comparator)) {\n        msg += \"\\n\\n\" + (deepEqualsNotice(comparison.left, comparison.right));\n      }\n      return msg;\n    };\n    apparentReferenceError = function(result) {\n      return /^<Error: \"ReferenceError/.test(result);\n    };\n    evalInContextOfSpec = function(operand) {\n      var e;\n      try {\n        return (function() {\n          return eval(operand);\n        }).call(jasmine.getEnv().currentSpec);\n      } catch (_error) {\n        e = _error;\n        return \"<Error: \\\"\" + ((e != null ? typeof e.message === \"function\" ? e.message() : void 0 : void 0) || e) + \"\\\">\";\n      }\n    };\n    attemptedEquality = function(left, right, comparator) {\n      return (comparator === \"==\" || comparator === \"===\") && jasmine.getEnv().equals_(left, right);\n    };\n    return deepEqualsNotice = function(left, right) {\n      return \"However, these items are deeply equal! Try an expectation like this instead:\\n  expect(\" + left + \").toEqual(\" + right + \")\";\n    };\n  })(jasmine);\n\n}).call(this);\n",
    "/* jasmine-only - 0.1.0\n * Exclusivity spec helpers for jasmine: `describe.only` and `it.only`\n * https://github.com/davemo/jasmine-only\n */\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  (function(jasmine) {\n    var describeOnly, env, itOnly, root;\n\n    root = this;\n    env = jasmine.getEnv();\n    describeOnly = function(description, specDefinitions) {\n      var suite;\n\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\n      suite.exclusive_ = 1;\n      this.exclusive_ = Math.max(this.exclusive_, 1);\n      return this.describe_(suite, specDefinitions);\n    };\n    itOnly = function(description, func) {\n      var spec;\n\n      spec = this.it(description, func);\n      spec.exclusive_ = 2;\n      this.exclusive_ = 2;\n      return spec;\n    };\n    env.exclusive_ = 0;\n    env.describe = function(description, specDefinitions) {\n      var suite;\n\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\n      return this.describe_(suite, specDefinitions);\n    };\n    env.describe_ = function(suite, specDefinitions) {\n      var declarationError, e, parentSuite;\n\n      parentSuite = this.currentSuite;\n      if (parentSuite) {\n        parentSuite.add(suite);\n      } else {\n        this.currentRunner_.add(suite);\n      }\n      this.currentSuite = suite;\n      declarationError = null;\n      try {\n        specDefinitions.call(suite);\n      } catch (_error) {\n        e = _error;\n        declarationError = e;\n      }\n      if (declarationError) {\n        this.it(\"encountered a declaration exception\", function() {\n          throw declarationError;\n        });\n      }\n      this.currentSuite = parentSuite;\n      return suite;\n    };\n    env.specFilter = function(spec) {\n      return this.exclusive_ <= spec.exclusive_;\n    };\n    env.describe.only = function() {\n      return describeOnly.apply(env, arguments);\n    };\n    env.it.only = function() {\n      return itOnly.apply(env, arguments);\n    };\n    root.describe.only = function(description, specDefinitions) {\n      return env.describe.only(description, specDefinitions);\n    };\n    root.it.only = function(description, func) {\n      return env.it.only(description, func);\n    };\n    root.iit = root.it.only;\n    root.ddescribe = root.describe.only;\n    jasmine.Spec = (function(_super) {\n      __extends(Spec, _super);\n\n      function Spec(env, suite, description) {\n        this.exclusive_ = suite.exclusive_;\n        Spec.__super__.constructor.call(this, env, suite, description);\n      }\n\n      return Spec;\n\n    })(jasmine.Spec);\n    return jasmine.Suite = (function(_super) {\n      __extends(Suite, _super);\n\n      function Suite(env, suite, specDefinitions, parentSuite) {\n        this.exclusive_ = parentSuite && parentSuite.exclusive_ || 0;\n        Suite.__super__.constructor.call(this, env, suite, specDefinitions, parentSuite);\n      }\n\n      return Suite;\n\n    })(jasmine.Suite);\n  })(jasmine);\n\n}).call(this);\n",
    "/* jasmine-stealth - 0.0.13\n * Makes Jasmine spies a bit more robust\n * https://github.com/searls/jasmine-stealth\n */\n(function() {\n  var Captor, fake, root, stubChainer, unfakes, whatToDoWhenTheSpyGetsCalled, _,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  root = this;\n\n  _ = function(obj) {\n    return {\n      each: function(iterator) {\n        var item, _i, _len, _results;\n        _results = [];\n        for (_i = 0, _len = obj.length; _i < _len; _i++) {\n          item = obj[_i];\n          _results.push(iterator(item));\n        }\n        return _results;\n      },\n      isFunction: function() {\n        return Object.prototype.toString.call(obj) === \"[object Function]\";\n      },\n      isString: function() {\n        return Object.prototype.toString.call(obj) === \"[object String]\";\n      }\n    };\n  };\n\n  root.spyOnConstructor = function(owner, classToFake, methodsToSpy) {\n    var fakeClass, spies;\n    if (methodsToSpy == null) {\n      methodsToSpy = [];\n    }\n    if (_(methodsToSpy).isString()) {\n      methodsToSpy = [methodsToSpy];\n    }\n    spies = {\n      constructor: jasmine.createSpy(\"\" + classToFake + \"'s constructor\")\n    };\n    fakeClass = (function() {\n      function _Class() {\n        spies.constructor.apply(this, arguments);\n      }\n\n      return _Class;\n\n    })();\n    _(methodsToSpy).each(function(methodName) {\n      spies[methodName] = jasmine.createSpy(\"\" + classToFake + \"#\" + methodName);\n      return fakeClass.prototype[methodName] = function() {\n        return spies[methodName].apply(this, arguments);\n      };\n    });\n    fake(owner, classToFake, fakeClass);\n    return spies;\n  };\n\n  unfakes = [];\n\n  afterEach(function() {\n    _(unfakes).each(function(u) {\n      return u();\n    });\n    return unfakes = [];\n  });\n\n  fake = function(owner, thingToFake, newThing) {\n    var originalThing;\n    originalThing = owner[thingToFake];\n    owner[thingToFake] = newThing;\n    return unfakes.push(function() {\n      return owner[thingToFake] = originalThing;\n    });\n  };\n\n  root.stubFor = root.spyOn;\n\n  jasmine.createStub = jasmine.createSpy;\n\n  jasmine.createStubObj = function(baseName, stubbings) {\n    var name, obj, stubbing;\n    if (stubbings.constructor === Array) {\n      return jasmine.createSpyObj(baseName, stubbings);\n    } else {\n      obj = {};\n      for (name in stubbings) {\n        stubbing = stubbings[name];\n        obj[name] = jasmine.createSpy(baseName + \".\" + name);\n        if (_(stubbing).isFunction()) {\n          obj[name].andCallFake(stubbing);\n        } else {\n          obj[name].andReturn(stubbing);\n        }\n      }\n      return obj;\n    }\n  };\n\n  whatToDoWhenTheSpyGetsCalled = function(spy) {\n    var matchesStub, priorStubbing;\n    matchesStub = function(stubbing, args, context) {\n      switch (stubbing.type) {\n        case \"args\":\n          return jasmine.getEnv().equals_(stubbing.ifThis, jasmine.util.argsToArray(args));\n        case \"context\":\n          return jasmine.getEnv().equals_(stubbing.ifThis, context);\n      }\n    };\n    priorStubbing = spy.plan();\n    return spy.andCallFake(function() {\n      var i, stubbing;\n      i = 0;\n      while (i < spy._stealth_stubbings.length) {\n        stubbing = spy._stealth_stubbings[i];\n        if (matchesStub(stubbing, arguments, this)) {\n          if (stubbing.satisfaction === \"callFake\") {\n            return stubbing.thenThat.apply(stubbing, arguments);\n          } else {\n            return stubbing.thenThat;\n          }\n        }\n        i++;\n      }\n      return priorStubbing;\n    });\n  };\n\n  jasmine.Spy.prototype.whenContext = function(context) {\n    var spy;\n    spy = this;\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\n    whatToDoWhenTheSpyGetsCalled(spy);\n    return stubChainer(spy, \"context\", context);\n  };\n\n  jasmine.Spy.prototype.when = function() {\n    var ifThis, spy;\n    spy = this;\n    ifThis = jasmine.util.argsToArray(arguments);\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\n    whatToDoWhenTheSpyGetsCalled(spy);\n    return stubChainer(spy, \"args\", ifThis);\n  };\n\n  stubChainer = function(spy, type, ifThis) {\n    var addStubbing;\n    addStubbing = function(satisfaction) {\n      return function(thenThat) {\n        spy._stealth_stubbings.push({\n          type: type,\n          ifThis: ifThis,\n          satisfaction: satisfaction,\n          thenThat: thenThat\n        });\n        return spy;\n      };\n    };\n    return {\n      thenReturn: addStubbing(\"return\"),\n      thenCallFake: addStubbing(\"callFake\")\n    };\n  };\n\n  jasmine.Spy.prototype.mostRecentCallThat = function(callThat, context) {\n    var i;\n    i = this.calls.length - 1;\n    while (i >= 0) {\n      if (callThat.call(context || this, this.calls[i]) === true) {\n        return this.calls[i];\n      }\n      i--;\n    }\n  };\n\n  jasmine.Matchers.ArgThat = (function(_super) {\n    __extends(ArgThat, _super);\n\n    function ArgThat(matcher) {\n      this.matcher = matcher;\n    }\n\n    ArgThat.prototype.jasmineMatches = function(actual) {\n      return this.matcher(actual);\n    };\n\n    return ArgThat;\n\n  })(jasmine.Matchers.Any);\n\n  jasmine.Matchers.ArgThat.prototype.matches = jasmine.Matchers.ArgThat.prototype.jasmineMatches;\n\n  jasmine.argThat = function(expected) {\n    return new jasmine.Matchers.ArgThat(expected);\n  };\n\n  jasmine.Matchers.Capture = (function(_super) {\n    __extends(Capture, _super);\n\n    function Capture(captor) {\n      this.captor = captor;\n    }\n\n    Capture.prototype.jasmineMatches = function(actual) {\n      this.captor.value = actual;\n      return true;\n    };\n\n    return Capture;\n\n  })(jasmine.Matchers.Any);\n\n  jasmine.Matchers.Capture.prototype.matches = jasmine.Matchers.Capture.prototype.jasmineMatches;\n\n  Captor = (function() {\n    function Captor() {}\n\n    Captor.prototype.capture = function() {\n      return new jasmine.Matchers.Capture(this);\n    };\n\n    return Captor;\n\n  })();\n\n  jasmine.captor = function() {\n    return new Captor();\n  };\n\n}).call(this);\n",
    "describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, javascript)\", function() {\n\n  beforeEach(function() {\n    module(\"app\");\n  });\n\n  beforeEach(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n    this.$location = $location;\n    this.$httpBackend = $httpBackend;\n    this.scope = $rootScope.$new();\n    this.redirect = spyOn($location, 'path');\n    $controller('LoginController', {\n      $scope: this.scope,\n      $location: $location,\n      AuthenticationService: AuthenticationService\n    });\n  }));\n\n  afterEach(function() {\n    this.$httpBackend.verifyNoOutstandingRequest();\n    this.$httpBackend.verifyNoOutstandingExpectation();\n  });\n\n  describe(\"successfully logging in\", function() {\n    it(\"should redirect you to /home\", function() {\n      this.$httpBackend.expectPOST('/login', this.scope.credentials).respond(200);\n      this.scope.login();\n      this.$httpBackend.flush();\n      expect(this.redirect).toHaveBeenCalledWith('/home');\n    });\n  });\n});\n",
    "describe(\"directive: shows-message-when-hovered (vanilla jasmine, coffeescript)\", function() {\n\n  beforeEach(function() {\n    module(\"app\");\n  });\n\n  beforeEach(inject(function($rootScope, $compile) {\n    this.directiveMessage = 'ralph was here';\n    this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n    this.scope = $rootScope.$new();\n    this.scope.message = this.originalMessage = 'things are looking grim';\n    this.elem = $compile(this.html)(this.scope);\n  }));\n\n  describe(\"when a user mouses over the element\", function() {\n    it(\"sets the message on the scope to the message attribute of the element\", function() {\n      this.elem.triggerHandler('mouseenter');\n      expect(this.scope.message).toBe(this.directiveMessage);\n    });\n  });\n\n  describe(\"when a users mouse leaves the element\", function() {\n    it(\"restores the message to the original\", function() {\n      this.elem.triggerHandler('mouseleave');\n      expect(this.scope.message).toBe(this.originalMessage);\n    });\n  });\n\n});\n",
    "(function() {\n  describe(\"controller: LoginController ($httpBackend.when().respond, jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    Invariant(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"when a user successfully logs in\", function() {\n      Given(function() {\n        return this.$httpBackend.whenPOST('/login', this.scope.credentials).respond(200);\n      });\n      When(function() {\n        return this.scope.login();\n      });\n      When(function() {\n        return this.$httpBackend.flush();\n      });\n      return Then(\"LoginController should redirect you to /home\", function() {\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, coffeescript)\", function() {\n    beforeEach(function() {\n      return module(\"app\");\n    });\n    beforeEach(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$location = $location;\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    afterEach(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"successfully logging in\", function() {\n      return it(\"should redirect you to /home\", function() {\n        this.$httpBackend.expectPOST('/login', this.scope.credentials).respond(200);\n        this.scope.login();\n        this.$httpBackend.flush();\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"directive: shows-message-when-hovered (jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($rootScope, $compile) {\n      this.directiveMessage = 'ralph was here';\n      this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n      this.scope = $rootScope.$new();\n      this.scope.message = this.originalMessage = 'things are looking grim';\n      return this.elem = $compile(this.html)(this.scope);\n    }));\n    describe(\"when a user mouses over the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseenter');\n      });\n      return Then(\"the message on the scope is set to the message attribute of the element\", function() {\n        return this.scope.message === this.directiveMessage;\n      });\n    });\n    return describe(\"when a users mouse leaves the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseleave');\n      });\n      return Then(\"the message is reset to the original message\", function() {\n        return this.scope.message === this.originalMessage;\n      });\n    });\n  });\n\n}).call(this);\n\n(function() {\n  describe(\"service: AuthenticationService\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(function() {\n      var _this = this;\n      return inject(function($http, AuthenticationService) {\n        _this.AuthenticationService = AuthenticationService;\n        _this.$httpPost = spyOn($http, 'post');\n        return _this.$httpGet = spyOn($http, 'get');\n      });\n    });\n    describe(\"#login\", function() {\n      Given(function() {\n        return this.credentials = {\n          name: 'Dave'\n        };\n      });\n      When(function() {\n        return this.AuthenticationService.login(this.credentials);\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/login', this.credentials);\n      });\n    });\n    return describe(\"#logout\", function() {\n      When(function() {\n        return this.AuthenticationService.logout();\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/logout');\n      });\n    });\n  });\n\n}).call(this);\n"
  ]
}